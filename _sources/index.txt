.. couchquery documentation master file, created by
   sphinx-quickstart on Mon Aug 17 21:05:22 2009.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

tesbot -- Test Automation and Distribution System
=================================================

Testbot is a continuous integration server and client for distributing and running tests. It uses simple REST and JSON interfaces so that it can be easily extensible.

.. toctree::
   :maxdepth: 3

.. _installation:

Installation
------------

`testbot` requires `setuptools <http://pypi.python.org/pypi/setuptools>`_, `mako <http://www.makotemplates.org/>`_, `couchquery <http://github.com/mikeal/couchquery>`_, `webenv <http://github.com/mikeal/webenv>`_. If you do not have setuptools installed already you will want to::

   $ curl -O http://peak.telecommunity.com/dist/ez_setup.py
   $ python ez_setup.py

Now you can install testbot, easy_install will handle installing the other dependencies::

   $ easy_install testbot

The source code is publicly `available on github <http://github.com/mikeal/testbot>`_. Tickets should be logged on the `github issues tracker <http://github.com/mikeal/testbot/issues>`_. 

The process for code contributions is for users to `fork the repository on github <http://help.github.com/forking/>`_, push modifications to their public fork, and then send `mikeal <http://github.com/mikeal>`_ a `pull request <http://github.com/guides/pull-requests>`_.

.. _creating-a-client:

Creating a client
-----------------

The easiest way to write a client is to subclass :class:`Client` ::

   from testbot.client import Client

   class MyClient(Client):
       jobtypes = ['my-test-type']
   
       def do_job(self, job):
           # Job handler
           return {"result":False, "debug":"We should write code that actually handles this job"}

You can now start the client. If you would like to block indefinitely you can call :class:`Client.run()`, if you would like to start a background thread to handle jobs you can use :class:`Client.start()`. If you start a Client instance using :class:`Client.start()` you can stop it using :class:`Client.stop()`. Calling :class:`Client.stop()` will block until the current do_job call finishes if one is currently running.

Clients register with the testbot server, by default they create an attribute called `capabilities` which includes two other attributes, `platform` and `jobtypes`. In the example above only `jobtypes` is defined, which will be included in this capabilities information. By default :class:`Client` pulls platform information out of the Python interpreter which works for most client's but this can be overwritten.



.. module:: testbot
   :synopsis: Test Automation and Distribution System.
.. moduleauthor:: Mikeal Rogers <mikeal.rogers@gmail.com>
.. sectionauthor:: Mikeal Rogers <mikeal.rogers@gmail.com>